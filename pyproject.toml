[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "cv-matching-platform"
version = "1.0.0"
description = "Intelligent CV matching platform with multi-tenant support"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Capital Placement", email = "tech@capital-placement.com"},
]
keywords = ["cv", "matching", "ai", "recruitment", "fastapi", "openai", "langchain", "vector-search"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core FastAPI and ASGI
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    
    # Data Validation and Serialization  
    "pydantic>=2.9.0",
    "pydantic-settings>=2.6.0",
    "email-validator>=2.2.0",
    
    # Database (PostgreSQL with pgvector support and SQLModel)
    "sqlmodel>=0.0.16",
    "sqlalchemy[asyncio]>=2.0.25",
    "alembic>=1.13.0",
    "pgvector>=0.3.3",
    
    # Authentication and Security (Core)
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.9",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=43.0.1",
    
    # Configuration and Environment
    "python-dotenv>=1.0.1",
    
    # Logging (Core)
    "structlog>=24.4.0",
    
    # Async HTTP
    "httpx>=0.27.0",
    "aiofiles>=24.1.0",
    
    # Basic Utilities
    "tenacity>=9.0.0",
    "python-dateutil>=2.9.0",
]

[project.optional-dependencies]
# Local development with enhanced caching
local = [
    "redis[hiredis]>=5.1.0",
    "rich>=13.8.1",  # Better console output
]

# AI/ML Stack (Cloud-Agnostic)
ai = [
    # OpenAI SDK (Latest with improved async support)
    "openai>=1.52.0",
    "tiktoken>=0.7.0",  # Token counting for OpenAI models
    
    # LangChain Core Components
    "langchain>=0.1.0",
    "langchain-openai>=0.0.8",
    "langchain-community>=0.0.20",
    "langchain-postgres>=0.0.6",
    
    # Vector Operations and ML
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",  # Advanced mathematical operations
    
    # Document Processing and Analysis
    "pypdf>=4.3.1",   # Modern PDF processing (replaces PyPDF2)
    "python-multipart>=0.0.6",
    "pillow>=10.0.0",
    "python-docx>=1.1.2",  # Word document processing
    "pdfplumber>=0.11.0",  # Advanced PDF text extraction
    
    # Text Processing and NLP
    "spacy>=3.7.0",   # Advanced text processing
    "nltk>=3.8.0",    # Natural language toolkit
    "textstat>=0.7.3",  # Text readability and quality metrics
    
    # Enhanced Performance and Caching
    "redis[hiredis]>=5.1.0",
    "aiocache>=0.12.2",  # Async caching
    
    # Vector Database and Similarity
    "pgvector>=0.3.3",
    "faiss-cpu>=1.7.4",  # Facebook AI Similarity Search (CPU version)
]


# Background processing and queues
processing = [
    "celery[redis]>=5.4.0",
    "kombu>=5.4.2",
    "redis[hiredis]>=5.1.0",
]

# File processing capabilities  
files = [
    "python-magic>=0.4.27",
    "openpyxl>=3.1.5",  # Excel file processing
    "chardet>=5.2.0",  # Character encoding detection
    "filetype>=1.2.0",  # File type detection
]

# Enhanced features
enhanced = [
    "websockets>=12.0",
    "slowapi>=0.1.9",  # Rate limiting
    "aiocache>=0.12.2",
    "cachetools>=5.5.0",
    "prometheus-client>=0.21.0",
    "pytz>=2024.2",
    "click>=8.1.7",
    "typer>=0.12.5",
]

# Development tools
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "factory-boy>=3.3.1",
    "faker>=30.0.0",
    
    # Code Quality
    "ruff>=0.6.9",
    "mypy>=1.11.2",
    "pre-commit>=3.8.0",
    
    # Development Tools
    "ipython>=8.28.0",
    "jupyter>=1.1.1",
    "watchfiles>=0.24.0",
    "rich>=13.8.1",
    
    # Documentation
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.39",
    
    # Performance
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]

# Production monitoring and deployment
production = [
    "gunicorn>=22.0.0",
    "newrelic>=10.2.0", 
    "sentry-sdk[fastapi]>=2.15.0",
    "prometheus-client>=0.21.0",
]

# Everything for full installation (AI-powered)
full = [
    "cv-matching-platform[local,ai,processing,files,enhanced,production]",
]


[project.urls]
Homepage = "https://github.com/capital-placement/cv-matching-platform"
Repository = "https://github.com/capital-placement/cv-matching-platform.git"
Documentation = "https://docs.capital-placement.com"
"Bug Tracker" = "https://github.com/capital-placement/cv-matching-platform/issues"

[project.scripts]
cv-matching = "app.main:app"

# Tool configurations
[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S104",  # hardcoded bind all interfaces
    "S608",  # possible SQL injection via string concatenation
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# Architectural enforcement is handled by tests/architecture/


[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "redis.*",
    "celery.*",
    "langchain.*",
    "tiktoken.*",
    "pgvector.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "tests/*",
    "venv/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"
