"""Initial schema from SQLModel with foreign key constraints

Revision ID: f4cfc66834b5
Revises: 
Create Date: 2025-09-30 16:58:54.061163

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import pgvector.sqlalchemy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4cfc66834b5'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenant_configurations',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('subscription_tier', sa.String(length=20), nullable=False),
    sa.Column('subscription_start_date', sa.Date(), nullable=False),
    sa.Column('subscription_end_date', sa.Date(), nullable=True),
    sa.Column('billing_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('search_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('processing_configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('quota_limits', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('feature_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('index_strategy', sa.String(length=20), nullable=False),
    sa.Column('dedicated_search_index', sa.String(length=100), nullable=True),
    sa.Column('data_region', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_suspended', sa.Boolean(), nullable=False),
    sa.Column('suspension_reason', sa.Text(), nullable=True),
    sa.Column('is_system_tenant', sa.Boolean(), nullable=False),
    sa.Column('current_usage', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('primary_contact_email', sa.String(length=255), nullable=False),
    sa.Column('billing_contact_email', sa.String(length=255), nullable=True),
    sa.Column('technical_contact_email', sa.String(length=255), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('locale', sa.String(length=10), nullable=False),
    sa.Column('date_format', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tenant_configurations', schema=None) as batch_op:
        batch_op.create_index('idx_tenant_configurations_active', ['is_active'], unique=False)
        batch_op.create_index('idx_tenant_configurations_contact', ['primary_contact_email'], unique=False)
        batch_op.create_index('idx_tenant_configurations_name', ['name'], unique=False)
        batch_op.create_index('idx_tenant_configurations_status', ['is_active', 'is_suspended'], unique=False)
        batch_op.create_index('idx_tenant_configurations_subscription_dates', ['subscription_start_date', 'subscription_end_date'], unique=False)
        batch_op.create_index('idx_tenant_configurations_subscription_tier', ['subscription_tier'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenant_configurations_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenant_configurations_is_suspended'), ['is_suspended'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenant_configurations_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_tenant_configurations_primary_contact_email'), ['primary_contact_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenant_configurations_subscription_tier'), ['subscription_tier'], unique=False)

    op.create_table('tenants',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('slug', sa.String(length=200), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('subscription_tier', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system_tenant', sa.Boolean(), nullable=False),
    sa.Column('primary_contact_email', sa.String(length=255), nullable=False),
    sa.Column('data_region', sa.String(length=50), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('locale', sa.String(length=10), nullable=False),
    sa.Column('date_format', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('tenants', schema=None) as batch_op:
        batch_op.create_index('idx_tenants_active', ['is_active'], unique=False)
        batch_op.create_index('idx_tenants_contact', ['primary_contact_email'], unique=False)
        batch_op.create_index('idx_tenants_name', ['name'], unique=False)
        batch_op.create_index('idx_tenants_system', ['is_system_tenant'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenants_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenants_name'), ['name'], unique=True)
        batch_op.create_index(batch_op.f('ix_tenants_primary_contact_email'), ['primary_contact_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_tenants_slug'), ['slug'], unique=True)

    op.create_table('api_keys',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_by', sa.Uuid(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rate_limit_requests', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_api_keys_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_api_keys_key_hash'), ['key_hash'], unique=True)
        batch_op.create_index(batch_op.f('ix_api_keys_tenant_id'), ['tenant_id'], unique=False)

    op.create_table('embeddings',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('entity_id', sa.Uuid(), nullable=False),
    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('embedding_model', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('embeddings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_embeddings_tenant_id'), ['tenant_id'], unique=False)

    op.create_table('profiles',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_by', sa.Uuid(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('university_id', sa.UUID(), nullable=True),
    sa.Column('corporate_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('experience_level', sa.String(length=20), nullable=True),
    sa.Column('profile_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('searchable_text', sa.Text(), nullable=False),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('normalized_skills', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('location_city', sa.String(length=100), nullable=True),
    sa.Column('location_state', sa.String(length=100), nullable=True),
    sa.Column('location_country', sa.String(length=100), nullable=True),
    sa.Column('overall_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('skills_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('experience_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('summary_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.Column('processing_status', sa.String(length=20), nullable=False),
    sa.Column('processing_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('privacy_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('consent_given', sa.Boolean(), nullable=False),
    sa.Column('consent_date', sa.DateTime(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('search_appearances', sa.Integer(), nullable=False),
    sa.Column('last_viewed_at', sa.DateTime(), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(), nullable=True),
    sa.Column('original_filename', sa.String(length=255), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('profiles', schema=None) as batch_op:
        batch_op.create_index('idx_profiles_experience_level', ['experience_level'], unique=False)
        batch_op.create_index('idx_profiles_location', ['location_city', 'location_country'], unique=False)
        batch_op.create_index('idx_profiles_processing_status', ['processing_status'], unique=False)
        batch_op.create_index('idx_profiles_searchable_text', ['searchable_text'], unique=False)
        batch_op.create_index('idx_profiles_skills', ['normalized_skills'], unique=False)
        batch_op.create_index('idx_profiles_tenant_status', ['tenant_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_corporate_id'), ['corporate_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_experience_level'), ['experience_level'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_location_city'), ['location_city'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_location_country'), ['location_country'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_processing_status'), ['processing_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_tenant_id'), ['tenant_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_profiles_university_id'), ['university_id'], unique=False)

    op.create_table('users',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('roles', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('ai_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_tenant_id'), ['tenant_id'], unique=False)

    op.create_table('user_sessions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_by', sa.Uuid(), nullable=True),
    sa.Column('created_by', sa.Uuid(), nullable=True),
    sa.Column('updated_by', sa.Uuid(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=False),
    sa.Column('user_agent', sa.Text(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_activity', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_sessions_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_session_token'), ['session_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_tenant_id'), ['tenant_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_sessions_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_tenant_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_session_token'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_expires_at'))

    op.drop_table('user_sessions')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_tenant_id'))
        batch_op.drop_index(batch_op.f('ix_users_is_active'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('profiles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_profiles_university_id'))
        batch_op.drop_index(batch_op.f('ix_profiles_tenant_id'))
        batch_op.drop_index(batch_op.f('ix_profiles_status'))
        batch_op.drop_index(batch_op.f('ix_profiles_processing_status'))
        batch_op.drop_index(batch_op.f('ix_profiles_name'))
        batch_op.drop_index(batch_op.f('ix_profiles_location_country'))
        batch_op.drop_index(batch_op.f('ix_profiles_location_city'))
        batch_op.drop_index(batch_op.f('ix_profiles_experience_level'))
        batch_op.drop_index(batch_op.f('ix_profiles_email'))
        batch_op.drop_index(batch_op.f('ix_profiles_corporate_id'))
        batch_op.drop_index('idx_profiles_tenant_status')
        batch_op.drop_index('idx_profiles_skills')
        batch_op.drop_index('idx_profiles_searchable_text')
        batch_op.drop_index('idx_profiles_processing_status')
        batch_op.drop_index('idx_profiles_location')
        batch_op.drop_index('idx_profiles_experience_level')

    op.drop_table('profiles')
    with op.batch_alter_table('embeddings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_embeddings_tenant_id'))

    op.drop_table('embeddings')
    with op.batch_alter_table('api_keys', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_api_keys_tenant_id'))
        batch_op.drop_index(batch_op.f('ix_api_keys_key_hash'))
        batch_op.drop_index(batch_op.f('ix_api_keys_expires_at'))

    op.drop_table('api_keys')
    with op.batch_alter_table('tenants', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tenants_slug'))
        batch_op.drop_index(batch_op.f('ix_tenants_primary_contact_email'))
        batch_op.drop_index(batch_op.f('ix_tenants_name'))
        batch_op.drop_index(batch_op.f('ix_tenants_is_active'))
        batch_op.drop_index('idx_tenants_system')
        batch_op.drop_index('idx_tenants_name')
        batch_op.drop_index('idx_tenants_contact')
        batch_op.drop_index('idx_tenants_active')

    op.drop_table('tenants')
    with op.batch_alter_table('tenant_configurations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tenant_configurations_subscription_tier'))
        batch_op.drop_index(batch_op.f('ix_tenant_configurations_primary_contact_email'))
        batch_op.drop_index(batch_op.f('ix_tenant_configurations_name'))
        batch_op.drop_index(batch_op.f('ix_tenant_configurations_is_suspended'))
        batch_op.drop_index(batch_op.f('ix_tenant_configurations_is_active'))
        batch_op.drop_index('idx_tenant_configurations_subscription_tier')
        batch_op.drop_index('idx_tenant_configurations_subscription_dates')
        batch_op.drop_index('idx_tenant_configurations_status')
        batch_op.drop_index('idx_tenant_configurations_name')
        batch_op.drop_index('idx_tenant_configurations_contact')
        batch_op.drop_index('idx_tenant_configurations_active')

    op.drop_table('tenant_configurations')
    # ### end Alembic commands ###
