"""Add webhook system tables with proper tenant isolation

Revision ID: a18e54380e0d
Revises: 72d402eb3c32
Create Date: 2025-10-04 22:02:42.415299

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'a18e54380e0d'
down_revision: Union[str, Sequence[str], None] = '72d402eb3c32'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('retry_policy_templates',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('operation_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_global', sa.Boolean(), nullable=False),
    sa.Column('policy_config', sa.JSON(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('updated_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('retry_policy_templates', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_retry_policy_templates_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_retry_policy_templates_is_default'), ['is_default'], unique=False)
        batch_op.create_index(batch_op.f('ix_retry_policy_templates_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_retry_policy_templates_operation_type'), ['operation_type'], unique=False)

    op.create_table('retry_states',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('operation_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('operation_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('policy_config', sa.JSON(), nullable=True),
    sa.Column('current_attempt', sa.Integer(), nullable=False),
    sa.Column('total_attempts', sa.Integer(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('next_attempt_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('first_error', sa.Text(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('last_error_category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('operation_context', sa.JSON(), nullable=True),
    sa.Column('metadata_', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('retry_states', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_retry_states_next_attempt_at'), ['next_attempt_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_retry_states_operation_id'), ['operation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_retry_states_operation_type'), ['operation_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_retry_states_user_id'), ['user_id'], unique=False)

    op.create_table('dead_letter_queue',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('operation_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('operation_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('retry_state_id', sa.Uuid(), nullable=True),
    sa.Column('final_error', sa.Text(), nullable=True),
    sa.Column('error_category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('retry_attempts', sa.Integer(), nullable=False),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=False),
    sa.Column('resolution_action', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('resolved_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('requeued_count', sa.Integer(), nullable=False),
    sa.Column('last_requeued_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('operation_context', sa.JSON(), nullable=True),
    sa.Column('metadata_', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['retry_state_id'], ['retry_states.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('dead_letter_queue', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_dead_letter_queue_is_resolved'), ['is_resolved'], unique=False)
        batch_op.create_index(batch_op.f('ix_dead_letter_queue_operation_id'), ['operation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_dead_letter_queue_operation_type'), ['operation_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_dead_letter_queue_retry_state_id'), ['retry_state_id'], unique=False)

    op.create_table('retry_attempts',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('retry_state_id', sa.Uuid(), nullable=False),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('operation_duration_ms', sa.Integer(), nullable=True),
    sa.Column('delay_before_attempt', sa.Float(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('attempt_context', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['retry_state_id'], ['retry_states.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('retry_attempts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_retry_attempts_retry_state_id'), ['retry_state_id'], unique=False)

    op.create_table('webhook_endpoints',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(length=2048), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('secret', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('signature_header', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('signature_algorithm', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('event_types', sa.ARRAY(sa.String(length=50)), nullable=True),
    sa.Column('retry_policy', sa.JSON(), nullable=True),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False),
    sa.Column('circuit_state', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
    sa.Column('failure_count', sa.Integer(), nullable=False),
    sa.Column('last_failure_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('circuit_opened_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('half_open_attempts', sa.Integer(), nullable=False),
    sa.Column('total_deliveries', sa.Integer(), nullable=False),
    sa.Column('successful_deliveries', sa.Integer(), nullable=False),
    sa.Column('failed_deliveries', sa.Integer(), nullable=False),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True),
    sa.Column('last_successful_delivery', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('webhook_endpoints', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_webhook_endpoints_tenant_id'), ['tenant_id'], unique=False)

    op.create_table('webhook_deliveries',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('endpoint_id', sa.Uuid(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=True),
    sa.Column('event_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('first_attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('http_status_code', sa.Integer(), nullable=True),
    sa.Column('response_body', sa.Text(), nullable=True),
    sa.Column('response_headers', sa.JSON(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('failure_reason', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('error_details', sa.JSON(), nullable=True),
    sa.Column('signature_generated', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('signature_verified', sa.Boolean(), nullable=True),
    sa.Column('user_agent', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('request_headers', sa.JSON(), nullable=True),
    sa.Column('correlation_id', sa.String(length=255), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('manual_retry', sa.Boolean(), nullable=False),
    sa.Column('retry_admin_user_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('retry_notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('max_attempts_overridden', sa.Boolean(), nullable=False),
    sa.Column('dead_letter_id', sa.Uuid(), nullable=True),
    sa.Column('dead_lettered_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['endpoint_id'], ['webhook_endpoints.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('webhook_deliveries', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_correlation_id'), ['correlation_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_endpoint_id'), ['endpoint_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_next_retry_at'), ['next_retry_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_scheduled_at'), ['scheduled_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_deliveries_tenant_id'), ['tenant_id'], unique=False)

    op.create_table('webhook_dead_letters',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('tenant_id', sa.UUID(), nullable=False),
    sa.Column('delivery_id', sa.Uuid(), nullable=False),
    sa.Column('endpoint_id', sa.Uuid(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=True),
    sa.Column('event_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('total_attempts', sa.Integer(), nullable=False),
    sa.Column('final_failure_reason', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('final_error_message', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('first_attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('dead_lettered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('dead_lettered_by', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewed_by', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('resolution_action', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('resolution_notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('can_retry', sa.Boolean(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('last_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_retry_delivery_id', sa.Uuid(), nullable=True),
    sa.Column('last_retry_admin_user_id', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('last_retry_notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['delivery_id'], ['webhook_deliveries.id'], ),
    sa.ForeignKeyConstraint(['endpoint_id'], ['webhook_endpoints.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('webhook_dead_letters', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_can_retry'), ['can_retry'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_dead_lettered_at'), ['dead_lettered_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_delivery_id'), ['delivery_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_endpoint_id'), ['endpoint_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_reviewed_at'), ['reviewed_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_webhook_dead_letters_tenant_id'), ['tenant_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('webhook_dead_letters', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_tenant_id'))
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_reviewed_at'))
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_event_type'))
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_endpoint_id'))
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_delivery_id'))
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_dead_lettered_at'))
        batch_op.drop_index(batch_op.f('ix_webhook_dead_letters_can_retry'))

    op.drop_table('webhook_dead_letters')
    with op.batch_alter_table('webhook_deliveries', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_tenant_id'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_status'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_scheduled_at'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_priority'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_next_retry_at'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_event_type'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_endpoint_id'))
        batch_op.drop_index(batch_op.f('ix_webhook_deliveries_correlation_id'))

    op.drop_table('webhook_deliveries')
    with op.batch_alter_table('webhook_endpoints', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_webhook_endpoints_tenant_id'))

    op.drop_table('webhook_endpoints')
    with op.batch_alter_table('retry_attempts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_retry_attempts_retry_state_id'))

    op.drop_table('retry_attempts')
    with op.batch_alter_table('dead_letter_queue', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_dead_letter_queue_retry_state_id'))
        batch_op.drop_index(batch_op.f('ix_dead_letter_queue_operation_type'))
        batch_op.drop_index(batch_op.f('ix_dead_letter_queue_operation_id'))
        batch_op.drop_index(batch_op.f('ix_dead_letter_queue_is_resolved'))

    op.drop_table('dead_letter_queue')
    with op.batch_alter_table('retry_states', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_retry_states_user_id'))
        batch_op.drop_index(batch_op.f('ix_retry_states_operation_type'))
        batch_op.drop_index(batch_op.f('ix_retry_states_operation_id'))
        batch_op.drop_index(batch_op.f('ix_retry_states_next_attempt_at'))

    op.drop_table('retry_states')
    with op.batch_alter_table('retry_policy_templates', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_retry_policy_templates_operation_type'))
        batch_op.drop_index(batch_op.f('ix_retry_policy_templates_name'))
        batch_op.drop_index(batch_op.f('ix_retry_policy_templates_is_default'))
        batch_op.drop_index(batch_op.f('ix_retry_policy_templates_is_active'))

    op.drop_table('retry_policy_templates')
    # ### end Alembic commands ###
